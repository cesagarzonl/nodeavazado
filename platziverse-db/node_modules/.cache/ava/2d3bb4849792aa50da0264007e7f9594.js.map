{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","agentFixtures","metricFixtures","config","logging","MetricStub","belongsTo","spy","id","uuid","single","Object","assign","AgentStub","db","sandbox","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","update","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual","createOrUpdate","calledTwice","calledOnce","Metric"],"mappings":"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","sourceRoot":"/home/andrea/Escritorio/pruebasx/avanza_nodejs/platziverse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent')\nconst metricFixtures = require('./fixtures/metric')\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet single = Object.assign({}, agentFixtures.single)\nlet AgentStub = null\nlet db = null\nlet sandbox = null\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // model find One stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n  // model findby id stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n  // model update stub\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agente': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent Exist')\n})\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgenntModel.hasMany was execute')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agument needs to be the model')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Agument needs to be the model')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.hasMany was execute')\n})\ntest.serial('Agent#findByID', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n\ntest.serial('Agent#createORUpdate - existe', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n  t.true(AgentStub.findOne.called, 'find one should be callled on model')\n  t.true(AgentStub.findOne.calledTwice, 'finOne shoud be called twice')\n  t.true(AgentStub.update.calledOnce, 'finOne shoud be called twice')\n  t.deepEqual(agent, single, 'agent should be the same')\n})\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Metric Exist')\n})"]}