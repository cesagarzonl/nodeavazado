{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbiz","beforeEach","sandbox","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIG,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAKA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAACJ,KAAK,CAACK,GAAN;AADK,CAAjB;AAGA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAE,IAAb;AACAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC3BC,EAAAA,OAAO,GAAEV,KAAK,CAACU,OAAN,CAAcC,MAAd,EAAT;AACCL,EAAAA,SAAS,GAAE;AACVM,IAAAA,OAAO,EAACF,OAAO,CAACL,GAAR;AADE,GAAX;AAIA,QAAMQ,aAAa,GAAGd,UAAU,CAAC,KAAD,EAAO;AACtC,uBAAkB,MAAKO,SADe;AAEtC,uBAAkB,MAAKH;AAFe,GAAP,CAAhC;AAIAI,EAAAA,EAAE,GAAG,MAAMM,aAAa,CAACZ,MAAD,CAAxB;AACD,CAXD;AAYAJ,IAAI,CAACiB,SAAL,CAAgB,MAAK;AACpBJ,EAAAA,OAAO,IAAIV,KAAK,CAACU,OAAN,CAAcK,OAAd,EAAX;AACA,CAFD;AAGAlB,IAAI,CAAC,OAAD,EAAUmB,CAAC,IAAI;AAAA;;AACjBA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAAV,EAAE,uBAAF,CAAGW,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,aAAnB;AACD,CAFG,CAAJ;AAGArB,IAAI,CAACsB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAG;AAAA;AAAA;;AACxBA,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAd,SAAS,8BAAT,CAAUM,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,iCAAhC;AACAL,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAjB,UAAU,8BAAV,CAAWC,SAAX,wBAAqBiB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmC,iCAAnC;AACA,CAHD","sourceRoot":"/home/andrea/Escritorio/pruebasx/avanza_nodejs/platziverse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nlet config = {\n  logging: function () {}\n}\n\n\nlet MetricStub = {\n  belongsTo:sinon.spy()\n}\nlet AgentStub = null\nlet db = null\nlet sandbiz =null\ntest.beforeEach(async () => {\n\tsandbox =sinon.sandbox.create()\n  AgentStub ={\n  \thasMany:sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../',{\n  \t'./models/agente':() =>AgentStub,\n  \t'./models/metric':() =>MetricStub\n  })\n  db = await setupDatabase(config)\n})\ntest.afterEach( ()=> {\n\tsandbox && sinon.sandbox.restore()\n})\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent Exist')\n})\ntest.serial('Setup', t =>{\n\tt.true(AgentStub.hasMany.called,'AgenntModel.hasMany was execute')\n\tt.true(MetricStub.belongsTo.called,'MetricModel.hasMany was execute')\n})"]}