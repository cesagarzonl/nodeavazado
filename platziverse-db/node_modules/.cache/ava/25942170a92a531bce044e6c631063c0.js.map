{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual"],"mappings":"AAAA;;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AACA,IAAII,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAKA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAACL,KAAK,CAACM,GAAN;AADK,CAAjB;AAGA,IAAIC,EAAE,GAAG,CAAT;AACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBT,aAAa,CAACO,MAA/B,CAAb;AACA,IAAIG,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAE,IAAb;AACAhB,IAAI,CAACiB,UAAL,CAAgB,YAAY;AAC3BD,EAAAA,OAAO,GAAGb,KAAK,CAACa,OAAN,CAAcE,MAAd,EAAV;AACCJ,EAAAA,SAAS,GAAE;AACVK,IAAAA,OAAO,EAACH,OAAO,CAACP,GAAR;AADE,GAAX;AAIA,QAAMW,aAAa,GAAGlB,UAAU,CAAC,KAAD,EAAO;AACtC,uBAAkB,MAAKY,SADe;AAEtC,uBAAkB,MAAKP;AAFe,GAAP,CAAhC;AAIAQ,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACf,MAAD,CAAxB;AACD,CAXD;AAYAL,IAAI,CAACqB,SAAL,CAAgB,MAAK;AACpBL,EAAAA,OAAO,IAAIb,KAAK,CAACa,OAAN,CAAcM,OAAd,EAAX;AACA,CAFD;AAGAtB,IAAI,CAAC,OAAD,EAAUuB,CAAC,IAAI;AAAA;;AACjBA,EAAAA,CAAC,CAACC,MAAF,uBAAS,WAAAT,EAAE,uBAAF,CAAGU,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,aAAnB;AACD,CAFG,CAAJ;AAGAzB,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAG;AAAA;AAAA;AAAA;AAAA;;AACxBA,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAb,SAAS,8BAAT,CAAUK,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgC,iCAAhC;AACAL,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAAb,SAAS,qCAAT,CAAUK,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAgD,+BAAhD;AACAgB,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAApB,UAAU,qCAAV,CAAWC,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAkD,+BAAlD;AACAS,EAAAA,CAAC,CAACI,IAAF,yBAAO,wBAAApB,UAAU,8BAAV,CAAWC,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmC,iCAAnC;AACA,CALD;AAMA5B,IAAI,CAAC0B,MAAL,CAAY,gBAAZ,EAA6B,MAAMH,CAAN,IAAW;AACtC,MAAIO,KAAK,GAAG,MAAMf,EAAE,CAACU,KAAH,CAASM,QAAT,CAAkBrB,EAAlB,CAAlB;AAEAa,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmB1B,aAAa,CAAC2B,QAAd,CAAuBrB,EAAvB,CAAnB,EAA+C,oBAA/C;AACD,CAJD","sourceRoot":"/home/andrea/Escritorio/pruebasx/avanza_nodejs/platziverse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nconst agentFixtures = require('./fixtures/agent')\nlet config = {\n  logging: function () {}\n}\n\n\nlet MetricStub = {\n  belongsTo:sinon.spy()\n}\nlet id = 1\nlet single = Object.assign({},agentFixtures.single)\nlet AgentStub = null\nlet db = null\nlet sandbox =null\ntest.beforeEach(async () => {\n\tsandbox = sinon.sandbox.create()\n  AgentStub ={\n  \thasMany:sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../',{\n  \t'./models/agente':() =>AgentStub,\n  \t'./models/metric':() =>MetricStub\n  })\n  db = await setupDatabase(config)\n})\ntest.afterEach( ()=> {\n\tsandbox && sinon.sandbox.restore()\n})\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent Exist')\n})\ntest.serial('Setup', t =>{\n\tt.true(AgentStub.hasMany.called,'AgenntModel.hasMany was execute')\n\tt.true(AgentStub.hasMany.calledWith(MetricStub),'Agument needs to be the model')\n\tt.true(MetricStub.belongsTo.calledWith(AgentStub),'Agument needs to be the model')\n\tt.true(MetricStub.belongsTo.called,'MetricModel.hasMany was execute')\n})\ntest.serial('Agent#findByID',async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.deepEqual(agent, agentFixtures.findById(id), 'should be the same')\n})"]}